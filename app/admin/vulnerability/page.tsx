"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import {
    Sidebar,
    SidebarContent,
    SidebarGroup,
    SidebarGroupContent,
    SidebarGroupLabel,
    SidebarHeader,
    SidebarInset,
    SidebarMenu,
    SidebarMenuButton,
    SidebarMenuItem,
    SidebarProvider,
    SidebarRail,
    SidebarTrigger,
} from "@/components/ui/sidebar"
import {
    Shield,
    FileCheck,
    Settings,
    Zap,
    AlertTriangle,
    CheckCircle,
    Clock,
    Search,
    Download,
    Eye,
    Bell,
    LogOut,
    Home,
    ChevronLeft,
    ChevronRight,
} from "lucide-react"
import Link from "next/link"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from "recharts"

// Données fictives pour les vulnérabilités
const vulnerabilities = [
    {
        id: "VUL-001",
        title: "Injection SQL dans le module de connexion",
        severity: "Critique",
        status: "Ouvert",
        date: "2024-01-15",
        asset: "Web Application",
        cvss: 9.8,
    },
    {
        id: "VUL-002",
        title: "Cross-Site Scripting (XSS) réfléchi",
        severity: "Élevée",
        status: "En cours",
        date: "2024-01-14",
        asset: "API Gateway",
        cvss: 7.4,
    },
    {
        id: "VUL-003",
        title: "Configuration SSL/TLS faible",
        severity: "Moyenne",
        status: "Corrigé",
        date: "2024-01-13",
        asset: "Load Balancer",
        cvss: 5.3,
    },
    {
        id: "VUL-004",
        title: "Divulgation d'informations sensibles",
        severity: "Élevée",
        status: "Ouvert",
        date: "2024-01-12",
        asset: "Database Server",
        cvss: 6.8,
    },
    {
        id: "VUL-005",
        title: "Authentification faible",
        severity: "Moyenne",
        status: "En cours",
        date: "2024-01-11",
        asset: "Admin Panel",
        cvss: 4.9,
    },
]

const trendData = [
    { month: "Jan", ouvert: 12, corrige: 8 },
    { month: "Fév", ouvert: 15, corrige: 10 },
    { month: "Mar", ouvert: 8, corrige: 12 },
    { month: "Avr", ouvert: 10, corrige: 15 },
    { month: "Mai", ouvert: 6, corrige: 18 },
    { month: "Juin", ouvert: 4, corrige: 20 },
]

function AppSidebar() {
    const menuItems = [
        {
            title: "Dashboard",
            icon: Home,
            href: "/admin",
        },
        {
            title: "Vulnérabilité",
            icon: Shield,
            href: "/admin/vulnerability",
            isActive: true,
        },
        {
            title: "Conformité DORA",
            icon: FileCheck,
            href: "/admin/dora",
        },
        {
            title: "POC",
            icon: Settings,
            href: "/admin/poc",
        },
        {
            title: "Outil 4",
            icon: Zap,
            href: "/admin/tool-4",
        },
    ]

    return (
        <Sidebar>
            <SidebarHeader className="border-b border-blue-100 p-4">
                <div className="flex items-center space-x-2">
                    <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                        <Shield className="h-5 w-5 text-white" />
                    </div>
                    <div>
                        <h2 className="text-lg font-bold text-blue-900">SecTools</h2>
                        <p className="text-sm text-gray-500">Dashboard Client</p>
                    </div>
                </div>
            </SidebarHeader>
            <SidebarContent>
                <SidebarGroup>
                    <SidebarGroupLabel className="text-blue-900 font-semibold">Outils de Sécurité</SidebarGroupLabel>
                    <SidebarGroupContent>
                        <SidebarMenu>
                            {menuItems.map((item) => (
                                <SidebarMenuItem key={item.title}>
                                    <SidebarMenuButton asChild isActive={item.isActive}>
                                        <Link href={item.href} className="flex items-center space-x-3 p-3 rounded-lg transition-colors">
                                            <item.icon className="h-5 w-5" />
                                            <span>{item.title}</span>
                                        </Link>
                                    </SidebarMenuButton>
                                </SidebarMenuItem>
                            ))}
                        </SidebarMenu>
                    </SidebarGroupContent>
                </SidebarGroup>
            </SidebarContent>
            <SidebarRail />
        </Sidebar>
    )
}

function getSeverityColor(severity: string) {
    switch (severity) {
        case "Critique":
            return "bg-red-100 text-red-800 border-red-200"
        case "Élevée":
            return "bg-orange-100 text-orange-800 border-orange-200"
        case "Moyenne":
            return "bg-yellow-100 text-yellow-800 border-yellow-200"
        case "Faible":
            return "bg-green-100 text-green-800 border-green-200"
        default:
            return "bg-gray-100 text-gray-800 border-gray-200"
    }
}

function getStatusColor(status: string) {
    switch (status) {
        case "Ouvert":
            return "bg-red-100 text-red-800 border-red-200"
        case "En cours":
            return "bg-blue-100 text-blue-800 border-blue-200"
        case "Corrigé":
            return "bg-green-100 text-green-800 border-green-200"
        default:
            return "bg-gray-100 text-gray-800 border-gray-200"
    }
}

export default function VulnerabilityAdmin() {
    const [searchTerm, setSearchTerm] = useState("")
    const [severityFilter, setSeverityFilter] = useState("all")
    const [statusFilter, setStatusFilter] = useState("all")
    const [currentPage, setCurrentPage] = useState(1)
    const itemsPerPage = 5

    const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
        const matchesSearch =
            vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            vuln.id.toLowerCase().includes(searchTerm.toLowerCase())
        const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter
        const matchesStatus = statusFilter === "all" || vuln.status === statusFilter

        return matchesSearch && matchesSeverity && matchesStatus
    })

    const totalPages = Math.ceil(filteredVulnerabilities.length / itemsPerPage)
    const startIndex = (currentPage - 1) * itemsPerPage
    const paginatedVulnerabilities = filteredVulnerabilities.slice(startIndex, startIndex + itemsPerPage)

    return (
        <SidebarProvider>
            <AppSidebar />
            <SidebarInset>
                {/* Header */}
                <header className="flex h-16 shrink-0 items-center gap-2 border-b border-blue-100 px-4 bg-white">
                    <SidebarTrigger className="-ml-1" />
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                        <Link href="/admin" className="hover:text-blue-600">
                            Dashboard
                        </Link>
                        <span>/</span>
                        <span className="text-blue-600">Vulnérabilités</span>
                    </div>
                    <div className="flex-1" />
                    <div className="flex items-center space-x-4">
                        <Button variant="ghost" size="sm" className="relative">
                            <Bell className="h-5 w-5" />
                            <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                3
              </span>
                        </Button>
                        <div className="flex items-center space-x-2">
                            <div className="text-right">
                                <p className="text-sm font-medium text-blue-900">Entreprise ABC</p>
                                <p className="text-xs text-gray-500">admin@entreprise-abc.com</p>
                            </div>
                            <Button variant="ghost" size="sm">
                                <LogOut className="h-4 w-4" />
                            </Button>
                        </div>
                    </div>
                </header>

                {/* Main Content */}
                <div className="flex flex-1 flex-col gap-4 p-6 bg-blue-50/30">
                    {/* Page Header */}
                    <div className="mb-6">
                        <h1 className="text-3xl font-bold text-blue-900 mb-2">Gestion des Vulnérabilités</h1>
                        <p className="text-gray-600">Surveillez et gérez les vulnérabilités de votre infrastructure</p>
                    </div>

                    {/* Stats Cards */}
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                        <Card className="border-0 shadow-md">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium text-gray-600">Total</CardTitle>
                                <Shield className="h-4 w-4 text-blue-500" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold text-blue-600">58</div>
                                <p className="text-xs text-gray-500">Vulnérabilités détectées</p>
                            </CardContent>
                        </Card>

                        <Card className="border-0 shadow-md">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium text-gray-600">Critiques</CardTitle>
                                <AlertTriangle className="h-4 w-4 text-red-500" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold text-red-600">8</div>
                                <p className="text-xs text-gray-500">Nécessitent une action immédiate</p>
                            </CardContent>
                        </Card>

                        <Card className="border-0 shadow-md">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium text-gray-600">En cours</CardTitle>
                                <Clock className="h-4 w-4 text-orange-500" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold text-orange-600">15</div>
                                <p className="text-xs text-gray-500">En cours de correction</p>
                            </CardContent>
                        </Card>

                        <Card className="border-0 shadow-md">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium text-gray-600">Corrigées</CardTitle>
                                <CheckCircle className="h-4 w-4 text-green-500" />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold text-green-600">35</div>
                                <p className="text-xs text-gray-500">Ce mois-ci</p>
                            </CardContent>
                        </Card>
                    </div>

                    {/* Charts */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                        <Card className="border-0 shadow-md">
                            <CardHeader>
                                <CardTitle className="text-lg font-semibold text-blue-900">Tendance des Corrections</CardTitle>
                                <CardDescription>Évolution des vulnérabilités ouvertes vs corrigées</CardDescription>
                            </CardHeader>
                            <CardContent>
                                <ResponsiveContainer width="100%" height={300}>
                                    <LineChart data={trendData}>
                                        <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                                        <XAxis dataKey="month" stroke="#64748b" />
                                        <YAxis stroke="#64748b" />
                                        <Tooltip />
                                        <Line type="monotone" dataKey="ouvert" stroke="#ef4444" strokeWidth={2} name="Ouvertes" />
                                        <Line type="monotone" dataKey="corrige" stroke="#22c55e" strokeWidth={2} name="Corrigées" />
                                    </LineChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </Card>

                        <Card className="border-0 shadow-md">
                            <CardHeader>
                                <CardTitle className="text-lg font-semibold text-blue-900">Répartition par Sévérité</CardTitle>
                                <CardDescription>Distribution des vulnérabilités par niveau de criticité</CardDescription>
                            </CardHeader>
                            <CardContent>
                                <ResponsiveContainer width="100%" height={300}>
                                    <BarChart
                                        data={[
                                            { name: "Critique", value: 8, color: "#ef4444" },
                                            { name: "Élevée", value: 15, color: "#f97316" },
                                            { name: "Moyenne", value: 23, color: "#eab308" },
                                            { name: "Faible", value: 12, color: "#22c55e" },
                                        ]}
                                    >
                                        <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                                        <XAxis dataKey="name" stroke="#64748b" />
                                        <YAxis stroke="#64748b" />
                                        <Tooltip />
                                        <Bar dataKey="value" fill="#3b82f6" radius={[4, 4, 0, 0]} />
                                    </BarChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </Card>
                    </div>

                    {/* Filters and Search */}
                    <Card className="border-0 shadow-md">
                        <CardHeader>
                            <CardTitle className="text-lg font-semibold text-blue-900">Liste des Vulnérabilités</CardTitle>
                            <CardDescription>Gérez et suivez l'état de vos vulnérabilités</CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="flex flex-col md:flex-row gap-4 mb-6">
                                <div className="flex-1">
                                    <div className="relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                                        <Input
                                            placeholder="Rechercher par ID ou titre..."
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                            className="pl-10"
                                        />
                                    </div>
                                </div>
                                <Select value={severityFilter} onValueChange={setSeverityFilter}>
                                    <SelectTrigger className="w-full md:w-48">
                                        <SelectValue placeholder="Sévérité" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">Toutes les sévérités</SelectItem>
                                        <SelectItem value="Critique">Critique</SelectItem>
                                        <SelectItem value="Élevée">Élevée</SelectItem>
                                        <SelectItem value="Moyenne">Moyenne</SelectItem>
                                        <SelectItem value="Faible">Faible</SelectItem>
                                    </SelectContent>
                                </Select>
                                <Select value={statusFilter} onValueChange={setStatusFilter}>
                                    <SelectTrigger className="w-full md:w-48">
                                        <SelectValue placeholder="Statut" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">Tous les statuts</SelectItem>
                                        <SelectItem value="Ouvert">Ouvert</SelectItem>
                                        <SelectItem value="En cours">En cours</SelectItem>
                                        <SelectItem value="Corrigé">Corrigé</SelectItem>
                                    </SelectContent>
                                </Select>
                                <Button variant="outline" className="border-blue-200 text-blue-600 hover:bg-blue-50 bg-transparent">
                                    <Download className="h-4 w-4 mr-2" />
                                    Exporter
                                </Button>
                            </div>

                            {/* Table */}
                            <div className="rounded-md border border-gray-200">
                                <Table>
                                    <TableHeader>
                                        <TableRow className="bg-gray-50">
                                            <TableHead className="font-semibold text-gray-900">ID</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Titre</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Sévérité</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Statut</TableHead>
                                            <TableHead className="font-semibold text-gray-900">CVSS</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Asset</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Date</TableHead>
                                            <TableHead className="font-semibold text-gray-900">Actions</TableHead>
                                        </TableRow>
                                    </TableHeader>
                                    <TableBody>
                                        {paginatedVulnerabilities.map((vuln) => (
                                            <TableRow key={vuln.id} className="hover:bg-blue-50/50">
                                                <TableCell className="font-medium text-blue-600">{vuln.id}</TableCell>
                                                <TableCell className="max-w-xs">
                                                    <div className="truncate" title={vuln.title}>
                                                        {vuln.title}
                                                    </div>
                                                </TableCell>
                                                <TableCell>
                                                    <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                                                </TableCell>
                                                <TableCell>
                                                    <Badge className={getStatusColor(vuln.status)}>{vuln.status}</Badge>
                                                </TableCell>
                                                <TableCell>
                          <span
                              className={`font-semibold ${
                                  vuln.cvss >= 9
                                      ? "text-red-600"
                                      : vuln.cvss >= 7
                                          ? "text-orange-600"
                                          : vuln.cvss >= 4
                                              ? "text-yellow-600"
                                              : "text-green-600"
                              }`}
                          >
                            {vuln.cvss}
                          </span>
                                                </TableCell>
                                                <TableCell>{vuln.asset}</TableCell>
                                                <TableCell>{vuln.date}</TableCell>
                                                <TableCell>
                                                    <div className="flex space-x-2">
                                                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                                            <Eye className="h-4 w-4" />
                                                        </Button>
                                                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                                            <CheckCircle className="h-4 w-4" />
                                                        </Button>
                                                    </div>
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                    </TableBody>
                                </Table>
                            </div>

                            {/* Pagination */}
                            <div className="flex items-center justify-between mt-4">
                                <div className="text-sm text-gray-500">
                                    Affichage de {startIndex + 1} à {Math.min(startIndex + itemsPerPage, filteredVulnerabilities.length)}{" "}
                                    sur {filteredVulnerabilities.length} résultats
                                </div>
                                <div className="flex items-center space-x-2">
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                                        disabled={currentPage === 1}
                                    >
                                        <ChevronLeft className="h-4 w-4" />
                                    </Button>
                                    <span className="text-sm text-gray-600">
                    Page {currentPage} sur {totalPages}
                  </span>
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                                        disabled={currentPage === totalPages}
                                    >
                                        <ChevronRight className="h-4 w-4" />
                                    </Button>
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </SidebarInset>
        </SidebarProvider>
    )
}
